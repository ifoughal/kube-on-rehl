#!/bin/bash

# Define color codes
COLOR_GREEN="\033[0;32m" # Green
COLOR_RED="\033[0;31m"
COLOR_RESET="\033[0m"    # reset to default
COLOR_YELLOW="\033[0;33m"
color_blue="\033[0;34m"
color_magenta="\033[0;35m"
COLOR_CYAN="\033[0;36m"

CURRENT_DATE="date"

# Validate log_type
valid_log_types=("DEBUG" "INFO" "WARNING" "ERROR")

# Parse arguments
override_function="$0"
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  -f|--override-function )
    shift
    override_function=$1
    ;;
  * )
    log_type="$1"
    shift
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi


function="$override_function"
log_type="$1"  # Set INFO as default log_type if not provided

# Validate log_type
valid_log_types=("DEBUG" "INFO" "WARNING" "ERROR")
if [[ ! " ${valid_log_types[@]} " =~ " ${log_type} " ]]; then
    # function="$log_type"
    log_type="INFO"
else
    # function="$1"
    shift 1
fi

message="$@"
datetime=$(date +"%Y-%m-%d %H:%M:%S,%3N")

log_message="$datetime - ${log_type} - ${function} - ${message}"

# Choose color based on log type
case "$log_type" in
    DEBUG) color="$COLOR_CYAN" ;;
    INFO) color="$COLOR_GREEN" ;;
    WARNING) color="$COLOR_YELLOW" ;;
    ERROR) color="$COLOR_RED" ;;
    *) color="$COLOR_RESET" ;;
esac

# Print log message with color and append to log file
echo -e "${color}${log_message}${COLOR_RESET}" | tee -a config_check.log
